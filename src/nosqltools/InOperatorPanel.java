/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nosqltools;

import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Ronald
 */
public class InOperatorPanel extends javax.swing.JPanel {

    private QueryCollectionDialog parent;
    protected String QueryString = "";
    protected String SubQueryString = "";
    /**
     * Creates new form InOperatorPanel
     */
    public InOperatorPanel() {
        initComponents();
        rbIN.setSelected(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        whereFieldLabel = new javax.swing.JLabel();
        fieldValue = new javax.swing.JTextField();
        whereValueFieldLabel = new javax.swing.JLabel();
        val3 = new javax.swing.JTextField();
        whereValueFieldLabel1 = new javax.swing.JLabel();
        val4 = new javax.swing.JTextField();
        whereValueFieldLabel2 = new javax.swing.JLabel();
        val1 = new javax.swing.JTextField();
        whereValueFieldLabel3 = new javax.swing.JLabel();
        val2 = new javax.swing.JTextField();
        cb1 = new javax.swing.JCheckBox();
        cb2 = new javax.swing.JCheckBox();
        cb3 = new javax.swing.JCheckBox();
        cb4 = new javax.swing.JCheckBox();
        rbIN = new javax.swing.JRadioButton();
        rbNOT_IN = new javax.swing.JRadioButton();

        setMaximumSize(new java.awt.Dimension(471, 135));
        setMinimumSize(new java.awt.Dimension(471, 135));

        whereFieldLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        whereFieldLabel.setText("Where Field:");

        fieldValue.setMaximumSize(new java.awt.Dimension(6, 20));

        whereValueFieldLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        whereValueFieldLabel.setText("Has Value = ");
        whereValueFieldLabel.setFocusable(false);

        val3.setEnabled(false);

        whereValueFieldLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        whereValueFieldLabel1.setText("Has Value = ");
        whereValueFieldLabel1.setFocusable(false);

        val4.setEnabled(false);

        whereValueFieldLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        whereValueFieldLabel2.setText("Has Value = ");
        whereValueFieldLabel2.setFocusable(false);

        whereValueFieldLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        whereValueFieldLabel3.setText("Has Value = ");
        whereValueFieldLabel3.setFocusable(false);

        val2.setEnabled(false);

        cb1.setSelected(true);
        cb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb1ActionPerformed(evt);
            }
        });

        cb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb2ActionPerformed(evt);
            }
        });

        cb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb3ActionPerformed(evt);
            }
        });

        cb4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb4ActionPerformed(evt);
            }
        });

        rbIN.setText("IN");
        rbIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbINActionPerformed(evt);
            }
        });

        rbNOT_IN.setText("NOT IN");
        rbNOT_IN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNOT_INActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(whereFieldLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rbNOT_IN)
                    .addComponent(rbIN))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(whereValueFieldLabel2)
                        .addComponent(whereValueFieldLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(whereValueFieldLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(whereValueFieldLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(val2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(val3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(val4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(val1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb1)
                    .addComponent(cb2)
                    .addComponent(cb3)
                    .addComponent(cb4))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(whereValueFieldLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(val1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cb1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cb2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(val2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(whereValueFieldLabel3)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(val3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(whereValueFieldLabel)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(cb3)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(val4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(whereValueFieldLabel1)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(cb4))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(whereFieldLabel))
                        .addGap(18, 18, 18)
                        .addComponent(rbIN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbNOT_IN)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb1ActionPerformed
        if(cb1.isSelected())
        {
            val1.setEnabled(true);
        }
        else if(!cb1.isSelected())
        {
            val1.setEnabled(false);
        }
    }//GEN-LAST:event_cb1ActionPerformed

    private void cb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb2ActionPerformed
        if(cb2.isSelected())
        {
            val2.setEnabled(true);
        }
        else if(!cb2.isSelected())
        {
            val2.setEnabled(false);
        }
    }//GEN-LAST:event_cb2ActionPerformed

    private void cb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb3ActionPerformed
        if(cb3.isSelected())
        {
            val3.setEnabled(true);
        }
        else if(!cb3.isSelected())
        {
            val3.setEnabled(false);
        }
    }//GEN-LAST:event_cb3ActionPerformed

    private void cb4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb4ActionPerformed
        if(cb4.isSelected())
        {
            val4.setEnabled(true);
        }
        else if(!cb4.isSelected())
        {
            val4.setEnabled(false);
        }
    }//GEN-LAST:event_cb4ActionPerformed

    private void rbINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbINActionPerformed
        if(rbIN.isSelected())
        {
            rbNOT_IN.setSelected(false);
        }
    }//GEN-LAST:event_rbINActionPerformed

    private void rbNOT_INActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNOT_INActionPerformed
        if(rbNOT_IN.isSelected())
        {
            rbIN.setSelected(false);
        }
    }//GEN-LAST:event_rbNOT_INActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cb1;
    private javax.swing.JCheckBox cb2;
    private javax.swing.JCheckBox cb3;
    private javax.swing.JCheckBox cb4;
    protected javax.swing.JTextField fieldValue;
    private javax.swing.JRadioButton rbIN;
    private javax.swing.JRadioButton rbNOT_IN;
    protected javax.swing.JTextField val1;
    protected javax.swing.JTextField val2;
    protected javax.swing.JTextField val3;
    protected javax.swing.JTextField val4;
    private javax.swing.JLabel whereFieldLabel;
    private javax.swing.JLabel whereValueFieldLabel;
    private javax.swing.JLabel whereValueFieldLabel1;
    private javax.swing.JLabel whereValueFieldLabel2;
    private javax.swing.JLabel whereValueFieldLabel3;
    // End of variables declaration//GEN-END:variables

protected String executeInConditionalQuery(DBCollection collection, QueryCollectionDialog parent)
{
        this.parent = parent;
        BasicDBObject query = null;
        DBCursor cursor = null;
        String result = "";
        this.QueryString = "";  
        this.SubQueryString = "";
        
        List<String> valList = new ArrayList<String>();
        if(val1.isEnabled())
        {
            valList.add(val1.getText());
            SubQueryString = val1.getText();
        }
        if(val2.isEnabled())
        {
            valList.add(val2.getText());
            SubQueryString += ", " + val2.getText();
        }
        if(val3.isEnabled())
        {
            valList.add(val3.getText());
            SubQueryString += ", " + val3.getText();
        }
        if(val4.isEnabled())
        {
            valList.add(val4.getText());
            SubQueryString += ", " + val4.getText();
        }
        
        if(rbIN.isSelected())
        {
        QueryString = Initializations.WHERE_SYNTAX + fieldValue.getText() + "\n" + Initializations.IN_SYNTAX + SubQueryString;
        query = getINQueryDBObject(valList, fieldValue.getText());
        }
        else if(rbNOT_IN.isSelected())
        {
        QueryString = Initializations.WHERE_SYNTAX + fieldValue.getText() + "\n" + Initializations.NOT_IN_SYNTAX + SubQueryString;
        query = getNOTINQueryDBObject(valList, fieldValue.getText());  
        }
        
        try
        {
            if(this.parent.orderByRB.isSelected())
            {
                if(this.parent.descendingRB.isSelected())
                {
                    QueryString += "\n" + Initializations.ORDER_BY_SYNTAX + this.parent.orderByTF.getText() + Initializations.DESCENDING_SYNTAX + "\n";
                    cursor = collection.find(query).sort(new BasicDBObject(this.parent.orderByTF.getText(), -1));
                }
                else
                {
                    QueryString += "\n" + Initializations.ORDER_BY_SYNTAX + this.parent.orderByTF.getText() + Initializations.ASCENDING_SYNTAX + "\n";
                    cursor = collection.find(query).sort(new BasicDBObject(this.parent.orderByTF.getText(), 1));
                }
            }
            else
            {
                cursor = collection.find(query);
            }
            
            while(cursor.hasNext())
            {
                result += cursor.next().toString() + "\n";
            }
        }
        catch(Exception exp)
        {
            return Initializations.QUERYGENERALERROR;
        }        
     
        return result;
    
}

    public BasicDBObject getINQueryDBObject(List<String> valList, String fieldValue)
    {
        BasicDBObject inQuery = new BasicDBObject();
        inQuery.put(fieldValue, new BasicDBObject("$in", valList));

        return inQuery;
    }
    
        public BasicDBObject getNOTINQueryDBObject(List<String> valList, String fieldValue)
    {
        BasicDBObject inQuery = new BasicDBObject();
        inQuery.put(fieldValue, new BasicDBObject("$nin", valList));

        return inQuery;
    }
}
