/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nosqltools;

import com.mongodb.AggregationOutput;
import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Set;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.omg.CORBA.INITIALIZE;

/**
 *
 * @author mgalea
 */
public class QueryCollectionDialog extends javax.swing.JDialog {

    /**
     * Creates new form QueryCollectionDialog
     */   
    private MainForm parent;
    private String CollectionName;
    private String QryType = Initializations.MATCH_DIALOG;
    
    public QueryCollectionDialog(MainForm parent, boolean modal, boolean fromNodesList) 
    {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        queryEditor.textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_SQL);
        queryEditor.textArea.setEditable(false);
        outputEditor.textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_SQL);
        outputEditor.textArea.setEditable(false);
        
        if(fromNodesList)
        {
            this.CollectionName = this.parent.jTree1.getLastSelectedPathComponent().toString();
            this.collectionList.addItem(this.CollectionName);
        }
        else
        {
            populateCollectionDropDown();
        }
        
        populateQueryAndProjectionDropDown();
    }
    
    private void populateCollectionDropDown()
    {
        Set<String> collectionList = this.parent.dbcon.db.getCollectionNames();
        Iterator iter = collectionList.iterator();
        
        while(iter.hasNext())
        {
            String currIterCollection = (String)iter.next();
            
            if(!currIterCollection.contains(MongoReserved.SYSTEMCOLLECTIONSPREFIX))
            {
                this.collectionList.addItem(currIterCollection);
            }
        }
        
        this.collectionList.setSelectedIndex(0);
    }
    
    private void populateQueryAndProjectionDropDown()
    {
        ArrayList<String> qryAndProjection = new ArrayList<>();
        qryAndProjection.add(Initializations.MATCH_DIALOG);
        qryAndProjection.add(Initializations.CONDITIONAL_DIALOG);
        
        for(String qry : qryAndProjection)
        {
            this.queryAndProjectionDD.addItem(qry);
        }       
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        queryTabbedPane = new javax.swing.JTabbedPane();
        queryPane = new javax.swing.JPanel();
        queryEditor = new nosqltools.SyntaxEditor();
        outputPane = new javax.swing.JPanel();
        outputEditor = new nosqltools.SyntaxEditor();
        descriptionLabel = new javax.swing.JLabel();
        collectionList = new javax.swing.JComboBox();
        queryAndProjectionLabel = new javax.swing.JLabel();
        queryAndProjectionDD = new javax.swing.JComboBox();
        collectionLabel = new javax.swing.JLabel();
        executeButton = new javax.swing.JButton();
        operationsMainPanel = new javax.swing.JPanel();
        groupByPanel = new nosqltools.GroupByPanel();
        conditionalPanel = new nosqltools.ConditionalPanel();
        orderByRB = new javax.swing.JRadioButton();
        orderByTF = new javax.swing.JTextField();
        ascendingRB = new javax.swing.JRadioButton();
        descendingRB = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Query Collections");
        setResizable(false);

        queryTabbedPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        javax.swing.GroupLayout queryPaneLayout = new javax.swing.GroupLayout(queryPane);
        queryPane.setLayout(queryPaneLayout);
        queryPaneLayout.setHorizontalGroup(
            queryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(queryEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
        );
        queryPaneLayout.setVerticalGroup(
            queryPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(queryEditor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
        );

        queryTabbedPane.addTab("Query", queryPane);

        javax.swing.GroupLayout outputPaneLayout = new javax.swing.GroupLayout(outputPane);
        outputPane.setLayout(outputPaneLayout);
        outputPaneLayout.setHorizontalGroup(
            outputPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
        );
        outputPaneLayout.setVerticalGroup(
            outputPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputEditor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
        );

        queryTabbedPane.addTab("Output", outputPane);

        descriptionLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        descriptionLabel.setText("Use this dialog to issue queries to any of the collections. ");
        descriptionLabel.setFocusable(false);

        collectionList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectionListActionPerformed(evt);
            }
        });

        queryAndProjectionLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        queryAndProjectionLabel.setText("Query and Projection Operators:");
        queryAndProjectionLabel.setFocusable(false);

        queryAndProjectionDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryAndProjectionDDActionPerformed(evt);
            }
        });

        collectionLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        collectionLabel.setText("Collection:");
        collectionLabel.setFocusable(false);

        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        operationsMainPanel.setMaximumSize(new java.awt.Dimension(450, 135));
        operationsMainPanel.setMinimumSize(new java.awt.Dimension(450, 135));
        operationsMainPanel.setPreferredSize(new java.awt.Dimension(450, 135));

        javax.swing.GroupLayout operationsMainPanelLayout = new javax.swing.GroupLayout(operationsMainPanel);
        operationsMainPanel.setLayout(operationsMainPanelLayout);
        operationsMainPanelLayout.setHorizontalGroup(
            operationsMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, operationsMainPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(groupByPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(conditionalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        operationsMainPanelLayout.setVerticalGroup(
            operationsMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operationsMainPanelLayout.createSequentialGroup()
                .addGroup(operationsMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(groupByPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conditionalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        orderByRB.setText("Order By:");
        orderByRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderByRBActionPerformed(evt);
            }
        });

        orderByTF.setEnabled(false);

        ascendingRB.setSelected(true);
        ascendingRB.setText("Ascending");
        ascendingRB.setEnabled(false);
        ascendingRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortingRBActionPerformed(evt);
            }
        });

        descendingRB.setText("Descending");
        descendingRB.setEnabled(false);
        descendingRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortingRBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(operationsMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                    .addComponent(queryTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(executeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(orderByRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orderByTF, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ascendingRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(descendingRB))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(queryAndProjectionLabel)
                                            .addComponent(collectionLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(collectionList, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(queryAndProjectionDD, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(descriptionLabel))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descriptionLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(collectionList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(collectionLabel))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queryAndProjectionLabel)
                    .addComponent(queryAndProjectionDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operationsMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderByRB)
                    .addComponent(orderByTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ascendingRB)
                    .addComponent(descendingRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(queryTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(executeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void collectionListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collectionListActionPerformed
        CollectionName = (String)this.collectionList.getSelectedItem();
    }//GEN-LAST:event_collectionListActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        try
        {
            DBCollection collection = this.parent.dbcon.db.getCollection(CollectionName);
            AggregationOutput aggOut = null;
            
            switch(this.QryType)
            {
                case Initializations.MATCH_DIALOG:
                {       
                    this.outputEditor.textArea.setText(this.groupByPanel.executeGroupByOperation(collection, this));
                    this.queryTabbedPane.setSelectedIndex(1);
                    String query = Initializations.FROM_SYNTAX + CollectionName + "\n";
                    query += this.groupByPanel.QueryString;
                    this.queryEditor.textArea.setText(query);
                    break;
                }
                
                case Initializations.CONDITIONAL_DIALOG:
                {
                    this.outputEditor.textArea.setText(this.conditionalPanel.executeConditionalQuery(collection, this));
                    this.queryTabbedPane.setSelectedIndex(1);
                    String query = Initializations.FROM_SYNTAX + CollectionName + "\n";
                    query += this.conditionalPanel.QueryString;
                    this.queryEditor.textArea.setText(query);
                    break;
                }
            }
        }
        catch(Exception exp)
        {
            exp.getMessage();
            exp.printStackTrace();
        }   
    }//GEN-LAST:event_executeButtonActionPerformed

    private void orderByRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderByRBActionPerformed
        if(orderByRB.isSelected())
        {
            orderByTF.setEnabled(true);
            ascendingRB.setEnabled(true);
            descendingRB.setEnabled(true);
        }
        else
        {
            orderByTF.setEnabled(false);
            ascendingRB.setEnabled(false);
            descendingRB.setEnabled(false);
        }
    }//GEN-LAST:event_orderByRBActionPerformed

    private void sortingRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortingRBActionPerformed
        if(evt.getSource().equals(ascendingRB))
        {
            descendingRB.setSelected(false);
        }
        if(evt.getSource().equals(descendingRB))
        {
            ascendingRB.setSelected(false);
        }
    }//GEN-LAST:event_sortingRBActionPerformed

    private void queryAndProjectionDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryAndProjectionDDActionPerformed
        this.QryType = (String)this.queryAndProjectionDD.getSelectedItem();

        switch(this.QryType)
        {
            case Initializations.MATCH_DIALOG:
            {
                this.conditionalPanel.setVisible(false);
                this.groupByPanel.setVisible(true);
                break;
            }
            
            case Initializations.CONDITIONAL_DIALOG:
            {
                this.groupByPanel.setVisible(false);
                this.conditionalPanel.setVisible(true);
            }
        }
    }//GEN-LAST:event_queryAndProjectionDDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QueryCollectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QueryCollectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QueryCollectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QueryCollectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                QueryCollectionDialog dialog = new QueryCollectionDialog(new MainForm(), true, false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JRadioButton ascendingRB;
    private javax.swing.JLabel collectionLabel;
    private javax.swing.JComboBox collectionList;
    private nosqltools.ConditionalPanel conditionalPanel;
    protected javax.swing.JRadioButton descendingRB;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JButton executeButton;
    private nosqltools.GroupByPanel groupByPanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel operationsMainPanel;
    protected javax.swing.JRadioButton orderByRB;
    protected javax.swing.JTextField orderByTF;
    private nosqltools.SyntaxEditor outputEditor;
    private javax.swing.JPanel outputPane;
    private javax.swing.JComboBox queryAndProjectionDD;
    private javax.swing.JLabel queryAndProjectionLabel;
    private nosqltools.SyntaxEditor queryEditor;
    private javax.swing.JPanel queryPane;
    private javax.swing.JTabbedPane queryTabbedPane;
    // End of variables declaration//GEN-END:variables
}
