/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nosqltools;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author mgalea
 */
public class StartClientDialog extends javax.swing.JDialog {

    /**
     * Creates new form StartClientDialog
     */
    
    MainForm parent; 
    
    public StartClientDialog(MainForm parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        setMongoclientServiceTextFieldDocumentListener();
        setDefaultProperties();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        binFileChooser = new javax.swing.JFileChooser();
        jLabel2 = new javax.swing.JLabel();
        clientServiceTextField = new javax.swing.JTextField();
        selectClientButton = new javax.swing.JButton();
        startClientButton = new javax.swing.JButton();
        cancelClientButton = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();
        setAsDefaultCB = new javax.swing.JCheckBox();

        binFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        binFileChooser.setDialogTitle("Go to BIN path");
        binFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Start the Client (mongo.exe)");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Select the Bin location for the client:");
        jLabel2.setFocusable(false);

        selectClientButton.setText("Select");
        selectClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectClientButtonActionPerformed(evt);
            }
        });

        startClientButton.setText("Start ");
        startClientButton.setEnabled(false);
        startClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startClientButtonActionPerformed(evt);
            }
        });

        cancelClientButton.setText("Cancel");
        cancelClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelClientButtonActionPerformed(evt);
            }
        });

        messageLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        setAsDefaultCB.setSelected(true);
        setAsDefaultCB.setText("Save as Default");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(messageLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cancelClientButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clientServiceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectClientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(setAsDefaultCB))
                            .addComponent(startClientButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientServiceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectClientButton)
                    .addComponent(setAsDefaultCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startClientButton)
                    .addComponent(cancelClientButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(messageLabel))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelClientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelClientButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelClientButtonActionPerformed

    private void startClientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startClientButtonActionPerformed
        PropertiesController propCntrl = new PropertiesController();        
        
        if(setAsDefaultCB.isSelected())
        {
            propCntrl.writeConfigFile(Initializations.MONGO_BIN_PATH, clientServiceTextField.getText());
        }
        
        ClientController cc = new ClientController();
        int retVal = cc.startClient(clientServiceTextField.getText());
        
        switch(retVal)
        {
            case 0: //success
            {
                messageLabel.setForeground(new Color(0,204,0));
                messageLabel.setFont(new Font("Tahoma", Font.BOLD, 12));
                messageLabel.setText(Initializations.SUCCESSMESSAGELABEL);
                this.parent.startClientMenuItem.setEnabled(false);
                this.parent.stopClientMenuItem.setEnabled(true);
                break;
            }
            
            case 999: //File does not exist
            {
                messageLabel.setForeground(Color.RED);
                messageLabel.setFont(new Font("Tahoma", Font.BOLD, 12));
                messageLabel.setText(Initializations.CLIENTBINLOCATIONERROR);  
                break;
            }
            
            case -1: //exception
            {
                break;
            }
            
            case 1: //Server needs to be started before
            {
                messageLabel.setForeground(Color.ORANGE);
                messageLabel.setFont(new Font("Tahoma", Font.BOLD, 12));
                messageLabel.setText(Initializations.UNABLETOCONNECTTOSERVER);  
                break;
            }
        }
    }//GEN-LAST:event_startClientButtonActionPerformed

    private void selectClientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectClientButtonActionPerformed
        int selectResult = binFileChooser.showOpenDialog(this);
        
        switch(selectResult)
        {
            case JFileChooser.APPROVE_OPTION:
            {
                clientServiceTextField.setText(binFileChooser.getSelectedFile().getPath());
                break;
            }
            
            default:
                break;
        }
    }//GEN-LAST:event_selectClientButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartClientDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartClientDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartClientDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartClientDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StartClientDialog dialog = new StartClientDialog(new MainForm(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private void setDefaultProperties()
    {
        PropertiesController propsCntrl = new PropertiesController();
        String mongoBinDefault = propsCntrl.getProperties(Initializations.MONGO_BIN_PATH);
        
        if(mongoBinDefault != null)
        {
            clientServiceTextField.setText(mongoBinDefault);
        }
    }
    
    private void setMongoclientServiceTextFieldDocumentListener()
    {
        clientServiceTextField.getDocument().addDocumentListener(new DocumentListener() 
        {
            public void changedUpdate(DocumentEvent e) 
            {
                if(clientServiceTextField.getText().length() > 0)
                {
                   startClientButton.setEnabled(true);
                }
                else
                {
                    startClientButton.setEnabled(false);
                }
            }
            
            public void removeUpdate(DocumentEvent e) 
            {
                if(clientServiceTextField.getText().length() > 0)
                {
                   startClientButton.setEnabled(true);
                }
                else
                {
                    startClientButton.setEnabled(false);
                }
            }
            
            public void insertUpdate(DocumentEvent e) 
            {
                if(clientServiceTextField.getText().length() > 0)
                {
                   startClientButton.setEnabled(true);
                }
                else
                {
                    startClientButton.setEnabled(false);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser binFileChooser;
    private javax.swing.JButton cancelClientButton;
    private javax.swing.JTextField clientServiceTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton selectClientButton;
    private javax.swing.JCheckBox setAsDefaultCB;
    private javax.swing.JButton startClientButton;
    // End of variables declaration//GEN-END:variables
}
