/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nosqltools;

import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JSpinner;

/**
 *
 * @author Ronald
 */
public class LimitedFieldsPanel extends javax.swing.JPanel {
    
    private QueryCollectionDialog parent;
    protected String QueryString = "";
    protected String FieldsString = "";
    /**
     * Creates new form LimitedFieldsPanel
     */
    public LimitedFieldsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        tfWhereField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfWhereValue = new javax.swing.JTextField();
        rbLimitFields = new javax.swing.JRadioButton();
        jSpinner = new javax.swing.JSpinner();
        tfField1 = new javax.swing.JTextField();
        tfField2 = new javax.swing.JTextField();
        tfField3 = new javax.swing.JTextField();
        tfField4 = new javax.swing.JTextField();
        jSpinnerIncExc = new javax.swing.JSpinner();

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setMaximumSize(new java.awt.Dimension(565, 165));
        setMinimumSize(new java.awt.Dimension(565, 165));
        setPreferredSize(new java.awt.Dimension(565, 165));

        jLabel1.setText("Where Field: ");

        jLabel2.setText("Has Value =");

        rbLimitFields.setText("Limit Fields");
        rbLimitFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbLimitFieldsActionPerformed(evt);
            }
        });

        jSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 4, 1));
        jSpinner.setEnabled(false);
        JSpinner.DefaultEditor editor2 = (JSpinner.DefaultEditor)jSpinner.getEditor();
        editor2.getTextField().setEditable(false);
        jSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerStateChanged(evt);
            }
        });

        tfField1.setEnabled(false);

        tfField2.setEnabled(false);

        tfField3.setEnabled(false);

        tfField4.setEnabled(false);

        jSpinnerIncExc.setModel(new javax.swing.SpinnerListModel(new String[] {"Include", "Exclude"}));
        JSpinner.DefaultEditor editor = (JSpinner.DefaultEditor)jSpinnerIncExc.getEditor();
        editor.getTextField().setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(rbLimitFields))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinnerIncExc, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfWhereField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(tfWhereValue, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfField1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfField2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfField3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfField4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfWhereField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(tfWhereValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerIncExc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbLimitFields))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rbLimitFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLimitFieldsActionPerformed
        
        jSpinner.setValue(1);
        if(rbLimitFields.isSelected())
        {
            jSpinnerIncExc.setVisible(true);
            jSpinner.setEnabled(true);
            tfField1.setEnabled(true);
        }
        else
        {
            jSpinnerIncExc.setVisible(false);
            jSpinner.setEnabled(false);
            tfField1.setEnabled(false);
            tfField2.setEnabled(false);
            tfField3.setEnabled(false);
            tfField4.setEnabled(false);
            tfField1.setText("");
            tfField2.setText("");
            tfField3.setText("");
            tfField4.setText("");
        }
    }//GEN-LAST:event_rbLimitFieldsActionPerformed

    private void jSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerStateChanged
        
        String spinnerValue = jSpinner.getValue().toString();
        
        switch(spinnerValue)
        {
            case "1": tfField1.setEnabled(true);
                      tfField2.setEnabled(false);
                      tfField3.setEnabled(false);
                      tfField4.setEnabled(false);
                      break;
            case "2": tfField1.setEnabled(true);
                      tfField2.setEnabled(true);
                      tfField3.setEnabled(false);
                      tfField4.setEnabled(false);
                      break;
            case "3": tfField1.setEnabled(true);
                      tfField2.setEnabled(true);
                      tfField3.setEnabled(true);
                      tfField4.setEnabled(false);
                      break;
            case "4": tfField1.setEnabled(true);
                      tfField2.setEnabled(true);
                      tfField3.setEnabled(true);
                      tfField4.setEnabled(true);
                      break;
        }

    
        
    }//GEN-LAST:event_jSpinnerStateChanged

    //This method has a small bug when projecting the query in SQL. When Include is selected ok.
    //When Exclude is selected fields in the SELECT statement are those that has been excluded.
    //To fix.
    protected String executeConditionalQuery(DBCollection collection, QueryCollectionDialog parent)
    {
        this.parent = parent;
        BasicDBObject query = null;
        DBCursor cursor = null;
        String result = "";
        this.QueryString = "";
        this.FieldsString = "";
        
        List<String> fields = new ArrayList<String>();
        if(tfField1.isEnabled() && !tfField1.getText().equals(""))
        {
            fields.add(tfField1.getText());
            FieldsString += Initializations.SELECT + tfField1.getText();
        }
        if(tfField2.isEnabled() && !tfField2.getText().equals(""))
        {
            fields.add(tfField2.getText());
            FieldsString += ", " + tfField2.getText();
        }
        if(tfField3.isEnabled() && !tfField3.getText().equals(""))
        {
            fields.add(tfField3.getText());
            FieldsString += ", " + tfField3.getText();
        }
        if(tfField4.isEnabled() && !tfField4.getText().equals(""))
        {
            fields.add(tfField4.getText());
            FieldsString += ", " + tfField4.getText();
        }
        if(!rbLimitFields.isSelected())
        {
            FieldsString = Initializations.SELECT + "*";
        }
        else
        {
            
        }
        
        query = this.getWhereQueryDBObject(tfWhereField.getText(), tfWhereValue.getText());
        
                try
        {
            if(this.parent.orderByRB.isSelected())
            {
                if(this.parent.descendingRB.isSelected())
                {
                    QueryString += Initializations.WHERE_SYNTAX + tfWhereField.getText() +  Initializations.EQUALS_SYNTAX + tfWhereValue.getText() + "\n" + Initializations.ORDER_BY_SYNTAX + parent.orderByTF.getText() + Initializations.DESCENDING_SYNTAX + "\n";
                    cursor = collection.find(query, this.getFields(fields)).sort(new BasicDBObject(this.parent.orderByTF.getText(), -1));
                }
                else
                {
                    QueryString += Initializations.WHERE_SYNTAX + tfWhereField.getText() +  Initializations.EQUALS_SYNTAX + tfWhereValue.getText() + "\n" + Initializations.ORDER_BY_SYNTAX + parent.orderByTF.getText() + Initializations.ASCENDING_SYNTAX + "\n";
                    cursor = collection.find(query, this.getFields(fields)).sort(new BasicDBObject(this.parent.orderByTF.getText(), 1));
                }
            }
            else
            {
                QueryString += Initializations.WHERE_SYNTAX + tfWhereField.getText() +  Initializations.EQUALS_SYNTAX + tfWhereValue.getText();
                cursor = collection.find(query, this.getFields(fields));
            } 
            
                while(cursor.hasNext())
            {
                    result += cursor.next().toString() + "\n";
            }
        }
        catch (Exception exp)
        {
                 return Initializations.QUERYGENERALERROR;   
        }


        
        return result;
    }
    
    //This method returns a normal query (e.g. SELECT * FROM table WHERE FIELDX = VALUEY)
    private BasicDBObject getWhereQueryDBObject(String whereField, String whereValue)
    {
        BasicDBObject query = new BasicDBObject(whereField, whereValue);
        return query;
    }
    
    public BasicDBObject getFields(List<String> fieldsList)
    {
        BasicDBObject fields = new BasicDBObject();
        if(jSpinnerIncExc.getValue().equals("Include"))
        {
            for(int i=0; i<fieldsList.size(); i++)
            {
                fields.put(fieldsList.get(i), 1);
            }
        }
        else if(jSpinnerIncExc.getValue().equals("Exclude"))
        {
            for(int i=0; i<fieldsList.size(); i++)
            {
                fields.put(fieldsList.get(i), 0);
            }
            
        }

        return fields;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner;
    private javax.swing.JSpinner jSpinnerIncExc;
    private javax.swing.JRadioButton rbLimitFields;
    private javax.swing.JTextField tfField1;
    private javax.swing.JTextField tfField2;
    private javax.swing.JTextField tfField3;
    private javax.swing.JTextField tfField4;
    private javax.swing.JTextField tfWhereField;
    private javax.swing.JTextField tfWhereValue;
    // End of variables declaration//GEN-END:variables
}
